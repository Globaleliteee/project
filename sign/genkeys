#!/usr/bin/env python3

import binascii
from trezorlib import ed25519raw

bootkeys=[
b'TTTTTTTTTTTTTTTTTTTTTTTTTTTTT321',
b'TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT2',
b'TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTq3'
]

vendorkeys=[
b'TTTTTTTTTTTTTTTTTTTTTTTTT4TTTTT1',
b'TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTw2',
b'TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTq3'
]

firmwarekeys=[
b'TTTTTTTTTTTTTTTTTTTTTTTTTTTTTT11',
b'TTTTTTTTTTTTTTTTTTTTTT6TTTTTTTT2',
b'TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTq3'
]

def hex_to_c(s):
    return '"\\x' + '\\x'.join([s[i:i + 2] for i in range(0, len(s), 2)]) + '"'

with open("bootkeys.h","wt") as keyfile:
    keyfile.write("// copy this file to embed/boardloader folder\n")
    keyfile.write("static const uint8_t * const BOARDLOADER_KEYS[] = {\n")
    for seckey in bootkeys:
        pubkey = ed25519raw.publickey(seckey)
        pubkey_hex = binascii.hexlify(pubkey).decode()
        keyfile.write("(const uint8_t *)")
        keyfile.write(hex_to_c(pubkey_hex))
        keyfile.write(",\n")      
    keyfile.write("};\n")
    keyfile.close()

with open("vendorkeys.h","wt") as keyfile:
    keyfile.write("// copy this file to embed/bootloader folder\n")
    keyfile.write("static const uint8_t * const BOOTLOADER_KEYS[] = {\n")
    for seckey in vendorkeys:
        pubkey = ed25519raw.publickey(seckey)
        pubkey_hex = binascii.hexlify(pubkey).decode()
        keyfile.write("(const uint8_t *)")
        keyfile.write(hex_to_c(pubkey_hex))
        keyfile.write(",\n")      
    keyfile.write("};\n")
    keyfile.close()

  
with open("signfirmwarekeys.txt","wt") as keyfile:
    number=1  
    keyfile.write("# copy this file to signbootloader")
    for seckey in bootkeys:
        seckey_hex = binascii.hexlify(seckey).decode()
        keyfile.write("\nbootseckey")
        keyfile.write(str(number))
        keyfile.write("=")        
        keyfile.write(seckey_hex)
        number=number+1
    number=1
    keyfile.write("\n")
    keyfile.write("\n# copy this file to signfirmware")
    for seckey in firmwarekeys:
        seckey_hex = binascii.hexlify(seckey).decode()
        keyfile.write("\nfwseckey")
        keyfile.write(str(number))
        keyfile.write("=")        
        keyfile.write(seckey_hex)
        number=number+1
    number=1
    keyfile.write("\n")
    keyfile.write("\n# copy this file to oazonFirmware")
    keyfile.write("\n# this is vdendor seckey")
    for seckey in vendorkeys:
        seckey_hex = binascii.hexlify(seckey).decode()
        keyfile.write("\nvdendorseckey")
        keyfile.write(str(number))
        keyfile.write("=")        
        keyfile.write(seckey_hex)
        number=number+1
    number=1
    keyfile.write("\n# this is firmware pubkeys ")
    for seckey in firmwarekeys:
        pubkey = ed25519raw.publickey(seckey)
        pubkey_hex = binascii.hexlify(pubkey).decode()
        keyfile.write("\nfwpubkey")
        keyfile.write(str(number))
        keyfile.write("=")        
        keyfile.write(pubkey_hex) 
        number=number+1
    keyfile.close()
